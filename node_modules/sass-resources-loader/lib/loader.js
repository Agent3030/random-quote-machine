'use strict';

var _isArrayOfStrings = require('./utils/isArrayOfStrings');

var _isArrayOfStrings2 = _interopRequireDefault(_isArrayOfStrings);

var _resolveResources = require('./utils/resolveResources');

var _resolveResources2 = _interopRequireDefault(_resolveResources);

var _logger = require('./utils/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (source) {
  var _this = this;

  if (this.cacheable) this.cacheable();

  global.__DEBUG__ = process.env.DEBUG === 'sass-resources-loader' || process.env.DEBUG === '*';

  _logger2.default.debug('Hey, we\'re in DEBUG mode! Yabba dabba doo!');

  _logger2.default.debug('Context:', this.context);

  var resources = this.options.sassResources;

  if (!resources) {
    throw new Error('\n      Could not find sassResources property.\n      Make sure it\'s defined in your webpack config.\n    ');
  }

  _logger2.default.debug('sassResources:', resources);

  var resourcesIsString = typeof resources === 'string';
  var resourcesIsArrayOfStrings = (0, _isArrayOfStrings2.default)(resources);

  _logger2.default.debug('sassResources is String:', resourcesIsString);
  _logger2.default.debug('sassResources is Array of Strings:', resourcesIsArrayOfStrings);

  if (!resourcesIsString && !resourcesIsArrayOfStrings) {
    throw new Error('\n      Looks like sassResources property has wrong type.\n      Make sure it\'s String or Array of Strings.\n    ');
  }

  var result = [];

  if (resourcesIsString) {
    var resourcesImport = (0, _resolveResources2.default)(resources, this);
    _logger2.default.debug('Resources:', resourcesImport || '**not found**');

    result.push(resourcesImport);
  } else {
    resources.forEach(function (resource) {
      var resourcesImport = (0, _resolveResources2.default)(resource, _this);
      _logger2.default.debug('Resources:', resourcesImport || '**not found**');

      result.push(resourcesImport);
    });
  }

  result.push(source);

  var resultOutput = result.map(function (fragment) {
    return fragment + '\n';
  }).join('');

  _logger2.default.debug('Output:', '\n', resultOutput);

  return resultOutput;
}; /* eslint func-names: 0 */